// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    ALU (x = D, y = AM,
        zx = instruction[11],
        nx = instruction[10],
        zy = instruction[9], 
        ny = instruction[8],
        f = instruction[7],
        no = instruction[6],
        out = outM, out = outALU,
        zr = ZR,
        ng = NG);
    
    ARegister (in = Ain, load = loadA,
                out = A, out[0..14] = addressM);
    Mux16 (a = A, b = inM, sel = instruction[12], out = AM);
    Mux16 (a = instruction, b = outALU,
            sel = instruction[15], out = Ain);
    DRegister (in = outALU, load = loadD,
            out = D);
    PC (in = A, reset = reset, inc = true,
        load = loadPC, out[0..14] = pc);
    
    Not (in = instruction[15], out = Noti);
    Or (a = Noti, b = instruction[5], out = loadA);
    And (a = instruction[15], b = instruction[4], out = loadD);
    And (a = instruction[15], b = instruction[3], out = writeM);
    

    Not (in = ZR, out = NotZR);
    Not (in = NG, out = NotNG);
    And (a = instruction[1], b = ZR, out = EQ);
    And (a = instruction[0], b = NotZR, out = temp);
    And (a = temp, b = NotNG, out = GT);
    And (a = instruction[2], b = NG, out = LT);
    Or (a = EQ, b = GT, out = temp2);
    Or (a = temp2, b = LT, out = temp3);
    And (a = temp3, b = instruction[15], out = loadPC);

}